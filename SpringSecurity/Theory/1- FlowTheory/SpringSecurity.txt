

#1) Spring Security Flow: [See DefaultFlow1,DefaultFlow2 and SpringSecurityFlow.jpg before/along reading this]

User --> Spring Security Filters(AutherizationFilter[to check User is Auth?], DefaultLoginPageFilter[for LoginPage], UserNamePasswdAuthFilter[for generating 				Authentication(UsernamePasswordAuthenticationToken) object which is saved in SecurityContext (UsernamePasswordAuthenticationToken implements Authentication)] )  ----> AuthenticationManager(which checks in all AuthProviders. ProviderManager implements AuthenticationManager) ----> Various AuthenticationProviders( Like LDAP or Simple DB creds(DAOAuthenticationProvider.java and its authenticate(..)) etc which uses UserDetailsManager/Service and PasswordEncoder) -----> InMemoryUserDetailsManager[implements UserDetailManager] ( To get user creds stored in memory against whom input user has to be validated.... its loadUserByUserName(...) is called from (DAOAuthenticationProvider.authenticate(...) to get in-memory user-details) ----> Then flow returns back to DAOAuthenticationProvider.authenticate(...) and there with the found user, DAOAuthenticationProvider.authenticate(...) calls DAOAuthenticationProvider.additionalAuthenticationChecks(....) ----> DAOAuthenticationProvider.additionalAuthenticationChecks(....)[ Uses PasswordEncoder to check the in-memory loaded user password with UI-provided-user password] ----> Authentication Response is send back from AuthenticationProviders(DAOAuthenticationProvider) ----> AuthenticationManager(ProviderManager) ----> UserNamePasswdAuthFilter [Now it saves extra information like auth-success/failure into previously formed Authentication Object((UsernamePasswordAuthenticationToken Object here)]


# So only important SpringSecurityFitlers in default-flow are (AutherizationFilter,DefaultLoginPageFilter,UserNamePasswdAuthFilter). THEN FLOW MOVES TO AUTHENICATION-MANAGERS WHICH ENRICH/DEALS with Authentication Object(UsernamePasswordAuthenticationToken Object Here) ).

# So AuthenticationProviders have the Logic for authentication..... but the logic to get details of user from storage system UserDetailsManager/Service is used.
# And PasswordEncoder is used for encryting the user provided password so as to check from whats stored in db. This check of passwd is obviously done during authntication logic.
# Authentication Object is saved into SecurityContextHolder as SecurityContext. SecurityContextHolder is a thread-safe , thread-local MAp to keep recored of logined users.

# When u access a secuerd URI first time, AutherizationFilter and DefaultLoginPageFilter comes to flow asking for user creds.
# When u input creds in login page generated by DefaultLoginPageFilter , flow starts from UserNamePasswdAuthFilter.java










