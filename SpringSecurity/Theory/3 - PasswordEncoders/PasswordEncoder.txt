# Use of Password Encoder ? 
To store Password in db in a secured encoded form for security reasons.

# DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider [Remeber as some default functionality is present in this abstract class like additionalAuthenticationChecks(...)]

# When does PasswordEncoder comes to Flow in SpringSecurity and the default Passwd encoder?
1. Default Passwd encoder is NoOpPasswordEncoder. It checks the simple text password from db and the simple text user entered as password in login form.

2. Password Fetched from DB(via UserDetailService/Manager) is stored in UserDetails Object( returned by UserDetailService/Manager.loadUserByUsername(....)[called from DaoAuthenticationProvider]) .....

3. Password Entered in UI is captured in Authentication Object(UsernamePasswordAuthenticationToken made by SpringSecurityFilters(UsernamePasswordAuthenticationFilter)) .....

4. And the PasswordEncoder comes in flow in AuthenticationProviders(DaoAuthenticationProvider) where it has the logic of authentication (comparing passwords) i.e 
in DaoAuthenticationProvider.authenticate(...) , after executing methods DaoAuthenticationProvider.retrieveUser(....)[which calls UserDetailService.loadUserByUserName(....)] and DaoAuthenticationProvider.preAuthenticationChecks(....)[whichs checks if account has expired/inactive etc], it(authenticate(...)) executes method DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails dbFetchedUser,UsernamePasswordAuthenticationToken uiEnteredUser)

5.Here in DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails dbFetchedUser,UsernamePasswordAuthenticationToken uiEnteredUser),  NoOpPasswordEncoder(default or configured) is used.

6. If you check PasswordEncoder.matches(String str1,String str2) function which is used to match passwords, it will simply match its 2 string params using equals(...)


# The BCryptPasswordEncoder takes 3 parameters in constructor for its Hashing Algorithm:
BCryptPasswordEncoder(BCryptVersion version, int strength,SecureRandom secureRandom):
a) version -> $2a, $3b etc indicating diffrent version of BCrypt Algo.
b) strength -> No of rounds to consider in Hashing Algo.
c) secureRandom -> Salt to use in Hashing Algo to make Encrypted Password Stonger.


#If we have Configured BCryptPasswordEncoder as the application Password Encoder , then BCryptPasswordEncoder .matches(String str1,String str2) function which is used to match passwords, where str1 is UI entered password in simple-string(captured from UsernamePasswordAuthenticationToken[Authentication] object) and str2 will be DB fetched BCrypt-entrypted password.

# Also PasswordEncoder.encode(string-passwd) is used to encode string-passwd into BCryptHash or any other hash as per PasswordEncoder configured. So use it in your rest end-point where u save user in user-creds table in db.